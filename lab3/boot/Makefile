AARCH64_PREFIX = aarch64-linux-gnu-
CC = $(AARCH64_PREFIX)gcc
LD = $(AARCH64_PREFIX)ld
OBJCPY = $(AARCH64_PREFIX)objcopy

CFLAGS = -Wall -nostdlib -nostartfiles -ffreestanding -I../include -mgeneral-regs-only
ASMFLAGS = -I../include

BUILD_DIR = ../build
IMG_DIR = ../img

.PHONY: all clean

all: $(IMG_DIR)/bootloader.img

clean:
	rm -rf $(OBJ_FILES) $(DEP_FILES)
	rm -rf $(IMG_DIR)/bootloader.img $(BUILD_DIR)/bootloader.elf

$(BUILD_DIR)/boot_%_c.o: %.c
	mkdir -p $(@D)
	$(CC) $(CFLAGS) -MMD -c $< -o $@

$(BUILD_DIR)/boot_%_s.o: %.S
	$(CC) $(ASMFLAGS) -MMD -c $< -o $@

C_FILES = $(wildcard *.c)
ASM_FILES = $(wildcard *.S)
OBJ_FILES = $(C_FILES:%.c=$(BUILD_DIR)/boot_%_c.o)
OBJ_FILES += $(ASM_FILES:%.S=$(BUILD_DIR)/boot_%_s.o)

LIB_C_FILES = mini_uart.c
LIB_ASM_FILES = utils.S mm.S
LIB_OBJ_FILES = $(LIB_C_FILES:%.c=$(BUILD_DIR)/lib_%_c.o)
LIB_OBJ_FILES += $(LIB_ASM_FILES:%.S=$(BUILD_DIR)/lib_%_s.o)

DEP_FILES = $(OBJ_FILES:%.o=%.d)
-include $(DEP_FILES)

$(IMG_DIR)/bootloader.img: linker.ld $(OBJ_FILES) $(LIB_OBJ_FILES)
	mkdir -p $(@D)
	$(LD) -T linker.ld -o $(BUILD_DIR)/bootloader.elf $(OBJ_FILES) $(LIB_OBJ_FILES)
	$(OBJCPY) $(BUILD_DIR)/bootloader.elf -O binary $@